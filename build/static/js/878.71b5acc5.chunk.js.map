{"version":3,"file":"static/js/878.71b5acc5.chunk.js","mappings":"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","sources":["components/LoginForm/LoginForm.styled.jsx","components/LoginForm/Icons.jsx","components/LoginForm/LoginFormV2.jsx","pages/LoginPage/LoginPage.jsx"],"sourcesContent":["import styled from 'styled-components';\r\nimport bg320 from './background/bg320Auth.png';\r\nimport bg780 from './background/bg768Auth.png';\r\nimport bg1280 from './background/bg1280Auth.png';\r\nimport { Field } from 'formik';\r\nimport { NavLink } from 'react-router-dom';\r\n\r\nexport const LogInWrapper = styled.div`\r\n  display: block;\r\n  max-width: 100%;\r\n  margin-left: auto;\r\n  margin-right: auto;\r\n  padding: 0 32px;\r\n\r\n  @media screen and (min-width: 768px) {\r\n    max-width: 608px;\r\n    min-height: 492px;\r\n    background-color: rgba(255, 255, 255, 1);\r\n    box-shadow: 7px 4px 14px rgba(0, 0, 0, 0.11);\r\n    border-radius: 40px;\r\n    padding: 60px 75px;\r\n  }\r\n  @media screen and (min-width: 1280px) {\r\n    max-width: 618px;\r\n    min-height: 496px;\r\n    padding: 60px 80px;\r\n  }\r\n`;\r\n\r\nexport const LogInTitle = styled.h1`\r\n  font-size: 24px;\r\n  font-weight: 700;\r\n  text-align: center;\r\n  margin-bottom: 40px;\r\n  letter-spacing: 0.04em;\r\n  @media screen and (min-width: 768px) {\r\n    margin-top: 0;\r\n    font-size: 36px;\r\n  }\r\n  @media screen and (min-width: 1280px) {\r\n    font-size: 36px;\r\n  }\r\n`;\r\n\r\nexport const LogInInput = styled(Field)`\r\n  width: 100%;\r\n  padding: 11px 14px;\r\n  background-color: #fdf7f2;\r\n  border: ${props => props.border || `1px solid rgba(245, 146, 86, 0.5)`};\r\n  margin-bottom: ${props => props.marginbottom || `24px`};\r\n  border-radius: 40px;\r\n  font-size: 14px;\r\n  letter-spacing: 0.04em;\r\n  font-weight: 400;\r\n  line-height: 1.4;\r\n  color: rgba(17, 17, 17, 0.6);\r\n  outline-color: rgba(245, 146, 86, 0.5);\r\n  @media screen and (min-width: 768px) {\r\n    padding: 14px 32px;\r\n    font-size: 18px;\r\n    margin-bottom: ${props => props.marginbottom || `39px`};\r\n  }\r\n  @media screen and (min-width: 1280px) {\r\n    padding: 14px 32px;\r\n    font-size: 18px;\r\n    margin-bottom: ${props => props.marginbottom || `16px`};\r\n  }\r\n`;\r\n\r\nexport const LogInButton = styled.button`\r\n  width: 100%;\r\n  background: #f59256;\r\n  border-radius: 40px;\r\n  border: 2px solid transparent;\r\n  color: rgba(255, 255, 255, 1);\r\n  font-size: 20px;\r\n  font-weight: 500;\r\n  letter-spacing: 0.04em;\r\n  padding: 8px 0;\r\n  margin-top: 16px;\r\n  margin-bottom: 40px;\r\n  transition: background-color 0.25s cubic-bezier(0.4, 0, 0.2, 1),\r\n    color 0.25s cubic-bezier(0.4, 0, 0.2, 1);\r\n  &:hover,\r\n  &:focus {\r\n    background-color: rgba(255, 255, 255, 1);\r\n    border: 2px solid #f59256;\r\n    color: rgba(0, 0, 0, 1);\r\n    transition: background-color 0.25s cubic-bezier(0.4, 0, 0.2, 1),\r\n      color 0.25s cubic-bezier(0.4, 0, 0.2, 1);\r\n  }\r\n  @media screen and (min-width: 768px) {\r\n    width: 458px;\r\n  }\r\n  @media screen and (min-width: 1280px) {\r\n    width: 458px;\r\n  }\r\n`;\r\n\r\nexport const LogInText = styled.p`\r\n  text-align: center;\r\n  color: rgba(17, 17, 17, 0.6);\r\n  font-size: 12px;\r\n  font-weight: 400;\r\n  letter-spacing: 0.04em;\r\n`;\r\n\r\nexport const Anchor = styled(NavLink)`\r\n  color: rgba(48, 145, 235, 1);\r\n  font-size: 12px;\r\n  font-weight: 400;\r\n  letter-spacing: 0.04em;\r\n  margin-left: 3px;\r\n  &:hover {\r\n    text-decoration: underline;\r\n  }\r\n`;\r\n\r\nexport const ErrorMessage = styled.div`\r\n  color: rgba(226, 0, 26, 1);\r\n  font-weight: 400;\r\n  font-size: 14px;\r\n  line-height: 1.35;\r\n  margin-bottom: 24px;\r\n  margin-left: 15px;\r\n  @media screen and (min-width: 768px) {\r\n    margin-left: 33px;\r\n  }\r\n  @media screen and (min-width: 1280px) {\r\n    margin-left: 33px;\r\n  }\r\n`;\r\n\r\nexport const ApproveMessage = styled.div`\r\n  color: rgba(60, 188, 129, 1);\r\n  font-weight: 400;\r\n  font-size: 14px;\r\n  line-height: 1.35;\r\n  margin-bottom: 24px;\r\n  margin-left: 15px;\r\n  @media screen and (min-width: 768px) {\r\n    margin-left: 33px;\r\n  }\r\n  @media screen and (min-width: 1280px) {\r\n    margin-left: 33px;\r\n  }\r\n`;\r\n\r\nexport const InputWrapper = styled.div`\r\n  position: relative;\r\n  @media screen and (min-width: 768px) {\r\n    margin-left: auto;\r\n    margin-right: auto;\r\n    width: 448px;\r\n  }\r\n`;\r\n\r\nexport const Icon = styled.svg`\r\n  position: absolute;\r\n  content: '';\r\n  top: 15px;\r\n  right: 18px;\r\n  @media screen and (min-width: 768px) {\r\n    top: 19px;\r\n    right: 20px;\r\n  }\r\n  @media screen and (min-width: 1280px) {\r\n    top: 19px;\r\n    right: 20px;\r\n  }\r\n`;\r\n\r\nexport const Section = styled.section`\r\n  position: absolute;\r\n  left: 0;\r\n  width: 100vw;\r\n  height: 100vh;\r\n  margin-top: 42px;\r\n  background-image: url(${bg320});\r\n  background-repeat: no-repeat;\r\n  background-size: contain;\r\n  background-position: center top 255px;\r\n\r\n  @media screen and (min-width: 768px) {\r\n    background-image: url(${bg780});\r\n\r\n    margin-top: 204px;\r\n  }\r\n\r\n  @media screen and (min-width: 1280px) {\r\n    background-image: url(${bg1280});\r\n\r\n    margin-top: 80px;\r\n  }\r\n`;\r\n","import { Icon } from './LoginForm.styled';\r\n\r\nexport const RedIcon = () => {\r\n  return (\r\n    <Icon\r\n      width=\"20\"\r\n      height=\"20\"\r\n      viewBox=\"0 0 20 20\"\r\n      fill=\"none\"\r\n      xmlns=\"http://www.w3.org/2000/svg\"\r\n    >\r\n      <path\r\n        d=\"M0 10C0 4.47656 4.47656 0 10 0C15.5234 0 20 4.47656 20 10C20 15.5234 15.5234 20 10 20C4.47656 20 0 15.5234 0 10ZM6.83594 8.12891L8.67578 9.96484L6.83594 11.8359C6.47266 12.2031 6.47266 12.7969 6.83594 13.1289C7.20312 13.5273 7.79688 13.5273 8.12891 13.1289L9.96484 11.3242L11.8359 13.1289C12.2031 13.5273 12.7969 13.5273 13.1289 13.1289C13.5273 12.7969 13.5273 12.2031 13.1289 11.8359L11.3242 9.96484L13.1289 8.12891C13.5273 7.79688 13.5273 7.20312 13.1289 6.83594C12.7969 6.47266 12.2031 6.47266 11.8359 6.83594L9.96484 8.67578L8.12891 6.83594C7.79688 6.47266 7.20312 6.47266 6.83594 6.83594C6.47266 7.20312 6.47266 7.79688 6.83594 8.12891Z\"\r\n        fill=\"#E2001A\"\r\n      />\r\n    </Icon>\r\n  );\r\n};\r\n\r\nexport const GreenIcon = () => {\r\n  return (\r\n    <Icon\r\n      width=\"20\"\r\n      height=\"20\"\r\n      viewBox=\"0 0 20 20\"\r\n      fill=\"none\"\r\n      xmlns=\"http://www.w3.org/2000/svg\"\r\n    >\r\n      <path\r\n        d=\"M0 10C0 4.47656 4.47656 0 10 0C15.5234 0 20 4.47656 20 10C20 15.5234 15.5234 20 10 20C4.47656 20 0 15.5234 0 10ZM14.5234 8.27344C14.9492 7.84766 14.9492 7.15234 14.5234 6.72656C14.0977 6.30078 13.4023 6.30078 12.9766 6.72656L8.75 10.9531L7.02344 9.22656C6.59766 8.80078 5.90234 8.80078 5.47656 9.22656C5.05078 9.65234 5.05078 10.3477 5.47656 10.7734L7.97656 13.2734C8.40234 13.6992 9.09766 13.6992 9.52344 13.2734L14.5234 8.27344Z\"\r\n        fill=\"#3CBC81\"\r\n      />\r\n    </Icon>\r\n  );\r\n};\r\n","import React from 'react';\r\nimport * as yup from 'yup';\r\nimport { Formik, Form } from 'formik';\r\nimport { useDispatch } from 'react-redux';\r\nimport { logIn } from 'redux/login/logIn-operations';\r\nimport {\r\n  LogInTitle,\r\n  LogInInput,\r\n  LogInButton,\r\n  LogInWrapper,\r\n  ErrorMessage,\r\n  LogInText,\r\n  Anchor,\r\n  ApproveMessage,\r\n  InputWrapper,\r\n  Section,\r\n} from './LoginForm.styled';\r\nimport { GreenIcon, RedIcon } from './Icons';\r\n\r\nconst validateSchema = () =>\r\n  yup.object().shape({\r\n    email: yup\r\n      .string()\r\n      .required(`Required`)\r\n      .email(`Enter a valid Email`)\r\n      .trim(),\r\n    password: yup\r\n      .string()\r\n      .required(`Required`)\r\n      .min(7, `Password should be from 7 to 32 characters`)\r\n      .max(32, `Password should be from 7 to 32 characters`)\r\n      .trim(),\r\n  });\r\n\r\nconst LogInForm = () => {\r\n  const dispatch = useDispatch();\r\n  const formSubmit = values => {\r\n    dispatch(logIn(values));\r\n  };\r\n  return (\r\n    <Formik\r\n      validationSchema={validateSchema}\r\n      initialValues={{\r\n        email: '',\r\n        password: '',\r\n      }}\r\n      onSubmit={(values, { setSubmitting }) => {\r\n        formSubmit(values);\r\n        setSubmitting(false);\r\n      }}\r\n      onChange={(values, { setSubmitting }) => {\r\n        console.log(values);\r\n      }}\r\n    >\r\n      {({ errors, touched }) => (\r\n        <Section>\r\n          <LogInWrapper>\r\n            <LogInTitle>Login</LogInTitle>\r\n            <Form>\r\n              <InputWrapper>\r\n                <LogInInput\r\n                  name=\"email\"\r\n                  type=\"email\"\r\n                  autoComplete=\"off\"\r\n                  placeholder=\"Email\"\r\n                  marginbottom={\r\n                    touched.email && '24' && (errors.email ? '0' : '0')\r\n                  }\r\n                  border={\r\n                    touched.email &&\r\n                    'rgba(245, 146, 86, 0.5)' &&\r\n                    (errors.email\r\n                      ? '1px solid rgba(226, 0, 26, 1)'\r\n                      : `1px solid rgba(60, 188, 129, 1)`)\r\n                  }\r\n                />\r\n                {touched.email &&\r\n                  'rgba(245, 146, 86, 0.5)' &&\r\n                  (errors.email ? (\r\n                    <ErrorMessage>{errors.email}</ErrorMessage>\r\n                  ) : (\r\n                    <ApproveMessage>Email is correct</ApproveMessage>\r\n                  ))}\r\n                {touched.email &&\r\n                  'rgba(245, 146, 86, 0.5)' &&\r\n                  (!errors.email ? <GreenIcon /> : <RedIcon />)}\r\n              </InputWrapper>\r\n              <InputWrapper>\r\n                <LogInInput\r\n                  name=\"password\"\r\n                  type=\"password\"\r\n                  autoComplete=\"off\"\r\n                  placeholder=\"Password\"\r\n                  marginbottom={\r\n                    touched.email && '24' && (errors.email ? '0' : '0')\r\n                  }\r\n                  border={\r\n                    touched.email &&\r\n                    'rgba(245, 146, 86, 0.5)' &&\r\n                    (errors.password\r\n                      ? '1px solid rgba(226, 0, 26, 1)'\r\n                      : `1px solid rgba(60, 188, 129, 1)`)\r\n                  }\r\n                />\r\n                {touched.email &&\r\n                  'rgba(245, 146, 86, 0.5)' &&\r\n                  (errors.password ? (\r\n                    <ErrorMessage>{errors.password}</ErrorMessage>\r\n                  ) : (\r\n                    <ApproveMessage>Password is secure</ApproveMessage>\r\n                  ))}\r\n                {touched.email &&\r\n                  'rgba(245, 146, 86, 0.5)' &&\r\n                  (!errors.password ? <GreenIcon /> : <RedIcon />)}\r\n              </InputWrapper>\r\n              <LogInButton type=\"submit\">Login</LogInButton>\r\n              <LogInText>\r\n                Don't have an account?\r\n                <Anchor to=\"/register\">Register</Anchor>\r\n              </LogInText>\r\n            </Form>\r\n          </LogInWrapper>\r\n        </Section>\r\n      )}\r\n    </Formik>\r\n  );\r\n};\r\nexport default LogInForm;\r\n","// import LoginForm from 'components/LoginForm/LoginForm';\r\nimport LogInForm from 'components/LoginForm/LoginFormV2';\r\n\r\nconst LoginPage = () => {\r\n  return (\r\n    <>\r\n      <LogInForm />\r\n    </>\r\n  );\r\n};\r\nexport default LoginPage;\r\n"],"names":["LogInWrapper","styled","LogInTitle","LogInInput","Field","props","border","marginbottom","LogInButton","LogInText","Anchor","NavLink","ErrorMessage","ApproveMessage","InputWrapper","Icon","Section","bg320","bg780","bg1280","RedIcon","width","height","viewBox","fill","xmlns","d","GreenIcon","validateSchema","yup","shape","email","required","trim","password","min","max","dispatch","useDispatch","validationSchema","initialValues","onSubmit","values","setSubmitting","logIn","formSubmit","onChange","console","log","errors","touched","name","type","autoComplete","placeholder","to"],"sourceRoot":""}